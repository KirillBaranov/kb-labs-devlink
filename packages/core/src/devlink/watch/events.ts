import { EventEmitter } from "node:events";
import { logger } from "../../utils/logger";

export interface DevLinkEvent {
  kind: string;
  schemaVersion: string; // "1.0"
  timestamp: string;
  package?: string;
  ticketId?: string;
  // –£–±—Ä–∞–ª–∏ [key: string]: any –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
  // –ü—Ä–∏—á–∏–Ω–∞: –∏–∑–±–µ–∂–∞—Ç—å any —Ç–∏–ø–æ–≤ –≤ –ø—É–±–ª–∏—á–Ω–æ–º API
  // –ö–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
}

// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
export interface PreflightEvent extends DevLinkEvent {
  kind: 'devlink.preflight';
  packages: Array<{
    package: string;
    buildCommand: string | null;
    devCommand: string | null;
    source: 'OVERRIDE' | 'SCRIPTS' | 'NO_BUILD_SCRIPT';
    status: 'OK' | 'SKIP';
  }>;
}

export interface BuildStartEvent extends DevLinkEvent {
  kind: 'devlink.build.start';
  package: string;
  command: string;
  ticketId: string;
  changedFiles?: string[];
}

export interface BuildResultEvent extends DevLinkEvent {
  kind: 'devlink.build.result';
  package: string;
  ticketId: string;
  success: boolean;
  durationMs: number;
  exitCode: number | string;
  stderrHead?: string[]; // –ø–µ—Ä–≤—ã–µ ~40 —Å—Ç—Ä–æ–∫
}

export interface LoopGuardCooldownEvent extends DevLinkEvent {
  kind: 'devlink.loopguard.cooldown';
  package: string;
  windowMs: number;
  cooldownMs: number;
  buildsInWindow: number;
}

export interface DegradedHashingEvent extends DevLinkEvent {
  kind: 'devlink.degraded.hashing';
  package: string;
  enabled: boolean;
  reason: string;
}

export interface RelinkDoneEvent extends DevLinkEvent {
  kind: 'devlink.relink.done';
  producer: string;
  consumers: string[];
  filesTouched: number; // —Å—á–µ—Ç—á–∏–∫
  ticketId: string;
}

export interface SkippedEvent extends DevLinkEvent {
  kind: 'devlink.info.skipped_no_change';
  package: string;
  reason: string;
}

export interface WatchStoppedEvent extends DevLinkEvent {
  kind: 'devlink.watch.stopped';
}

export interface WatchReadyEvent extends DevLinkEvent {
  kind: 'devlink.watch.ready';
  mode: string;
  providers: number;
  consumers: number;
}

export interface DryRunEvent extends DevLinkEvent {
  kind: 'devlink.dryrun';
  mode: string;
  providers: Array<{
    name: string;
    dir: string;
    buildCommand: string | null;
    devCommand: string | null;
    watchPaths: string[];
  }>;
  consumers: Array<{
    name: string;
    dir: string;
    hasRefreshScript: boolean;
  }>;
  dependencies: Array<{
    provider: string;
    consumers: string[];
  }>;
}

export interface GlobalCooldownEvent extends DevLinkEvent {
  kind: 'devlink.loopguard.global';
  activeCooldowns: number;
  cooldownMs: number;
}

export interface ManualOverrideEvent extends DevLinkEvent {
  kind: 'devlink.loopguard.manual_override';
  package: string;
  reason: string;
}

export interface ConfigErrorEvent extends DevLinkEvent {
  kind: 'devlink.config.error';
  message: string;
  path: string;
}

// Union type –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
export type AllDevLinkEvents = 
  | PreflightEvent
  | BuildStartEvent
  | BuildResultEvent
  | LoopGuardCooldownEvent
  | DegradedHashingEvent
  | RelinkDoneEvent
  | SkippedEvent
  | WatchStoppedEvent
  | WatchReadyEvent
  | DryRunEvent
  | GlobalCooldownEvent
  | ManualOverrideEvent
  | ConfigErrorEvent;

/**
 * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export class DevLinkEventEmitter extends EventEmitter {
  private jsonMode = false;
  private jsonlMode = false;
  
  constructor(jsonMode: boolean = false, jsonlMode: boolean = false) {
    super();
    this.jsonMode = jsonMode;
    this.jsonlMode = jsonlMode;
  }
  
  /**
   * Emit —Å–æ–±—ã—Ç–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * 
   * @param event - —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ union type AllDevLinkEvents
   * @returns true –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
   * 
   * –ü—Ä–∏—á–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Ç–∏–ø–æ–≤ —Å EventEmitter.emit
   * EventEmitter.emit –∏–º–µ–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—É (eventName: string, ...args: any[]), —á—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
   * –¥–ª—è —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é.
   * 
   * –ö–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ EventEmitter –±–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç Node.js EventEmitter
   */
  emitEvent(event: AllDevLinkEvents): boolean {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const enrichedEvent = {
      ...event,
      schemaVersion: '1.0',
      timestamp: new Date().toISOString()
    } as AllDevLinkEvents;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.debug("Emitting event", { kind: event.kind, package: event.package });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if (this.jsonMode || this.jsonlMode) {
      this.formatJsonEvent(enrichedEvent);
    } else {
                // Type assertion –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å formatHumanEvent
    // –ü—Ä–∏—á–∏–Ω–∞: enrichedEvent –∏–º–µ–µ—Ç —Ç–∏–ø DevLinkEvent, –Ω–æ formatHumanEvent –æ–∂–∏–¥–∞–µ—Ç AllDevLinkEvents
    // –ö–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: –ø—Ä–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.formatHumanEvent(enrichedEvent as any);
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º type assertion –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å EventEmitter
    // –ü—Ä–∏—á–∏–Ω–∞: EventEmitter.emit –æ–∂–∏–¥–∞–µ—Ç (eventName: string, ...args: any[])
    // –∞ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
    // –ö–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ EventEmitter –±–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    return super.emit('event', enrichedEvent as any);
  }
  
  /**
   * JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   * 
   * @param event - —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * 
   * –ü—Ä–∏—á–∏–Ω–∞ type assertion: formatJsonEvent –ø—Ä–∏–Ω–∏–º–∞–µ—Ç DevLinkEvent (–±–∞–∑–æ–≤—ã–π —Ç–∏–ø),
   * –Ω–æ sanitizeEvent –æ–∂–∏–¥–∞–µ—Ç AllDevLinkEvents (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã). –í runtime —ç—Ç–æ
   * —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ TypeScript —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤.
   * 
   * –ö–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: –ø—Ä–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private formatJsonEvent(event: DevLinkEvent): void {
    const sanitized = this.sanitizeEvent(event as any);
    const output = JSON.stringify(sanitized);
    
    if (this.jsonlMode) {
      console.log(output);
    } else {
      console.log(output);
    }
  }
  
  /**
   * Human-readable —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private formatHumanEvent(event: DevLinkEvent): void {
    const timestamp = new Date(event.timestamp).toLocaleTimeString();
    const pkg = event.package ? `@${event.package}` : '';
    
    switch (event.kind) {
      case 'devlink.preflight':
        this.formatPreflightEvent(event as PreflightEvent);
        break;
        
      case 'devlink.build.start':
        this.formatBuildStartEvent(event as BuildStartEvent, timestamp, pkg);
        break;
        
      case 'devlink.build.result':
        this.formatBuildResultEvent(event as BuildResultEvent, timestamp, pkg);
        break;
        
      case 'devlink.loopguard.cooldown':
        this.formatLoopGuardEvent(event as LoopGuardCooldownEvent, timestamp, pkg);
        break;
        
      case 'devlink.degraded.hashing':
        this.formatDegradedHashingEvent(event as DegradedHashingEvent, timestamp, pkg);
        break;
        
      case 'devlink.relink.done':
        this.formatRelinkDoneEvent(event as RelinkDoneEvent, timestamp);
        break;
        
      case 'devlink.info.skipped_no_change':
        this.formatSkippedEvent(event as SkippedEvent, timestamp, pkg);
        break;
        
      case 'devlink.watch.stopped':
        console.log(`\nüî≠ devlink:watch stopped\n`);
        break;
        
      default:
        console.log(`[${timestamp}] ${event.kind}${pkg ? ` ${pkg}` : ''}`);
    }
  }
  
  private formatPreflightEvent(event: PreflightEvent): void {
    console.log('üîç Preflight Validation\n');
    
    // –¢–∞–±–ª–∏—Ü–∞
    const header = 'Package'.padEnd(25) + 'Build Command'.padEnd(20) + 'Dev Command'.padEnd(20) + 'Source'.padEnd(15) + 'Status';
    console.log(header);
    console.log('‚îÄ'.repeat(80));
    
    for (const pkg of event.packages) {
      const packageName = pkg.package.padEnd(25);
      const buildCmd = (pkg.buildCommand || 'N/A').padEnd(20);
      const devCmd = (pkg.devCommand || 'N/A').padEnd(20);
      const source = pkg.source.padEnd(15);
      const status = pkg.status === 'OK' ? '‚úì OK' : '‚ö† SKIP';
      
      console.log(`${packageName}${buildCmd}${devCmd}${source}${status}`);
    }
    
    const skipped = event.packages.filter(p => p.status === 'SKIP');
    if (skipped.length > 0) {
      console.log(`\n‚ö† Warning: ${skipped.length} package(s) skipped (no build script)`);
      console.log('  Run \'kb devkit sync\' to add standard build scripts\n');
    } else {
      console.log('\n');
    }
  }
  
  private formatBuildStartEvent(event: BuildStartEvent, timestamp: string, pkg: string): void {
    const files = event.changedFiles?.slice(0, 3).join(', ') || '';
    const moreFiles = event.changedFiles && event.changedFiles.length > 3 
      ? ` +${event.changedFiles.length - 3} more` 
      : '';
    
    console.log(`[${timestamp}] ‚ñ∂ build ${pkg} (changed: ${event.changedFiles?.length || 0} files, +0.4s)`);
    if (files) {
      console.log(`  ‚Ü≥ ${files}${moreFiles}`);
    }
  }
  
  private formatBuildResultEvent(event: BuildResultEvent, timestamp: string, pkg: string): void {
    const duration = this.formatDuration(event.durationMs);
    
    if (event.success) {
      console.log(`  ‚Ü≥ ‚úì ${pkg} in ${duration}`);
    } else {
      console.log(`  ‚Ü≥ ‚úó ${pkg} failed (exit ${event.exitCode})`);
      
      if (event.stderrHead && event.stderrHead.length > 0) {
        console.log('  Error output:');
        event.stderrHead.slice(0, 10).forEach(line => {
          console.log(`    ${line}`);
        });
        if (event.stderrHead.length > 10) {
          console.log(`    ... and ${event.stderrHead.length - 10} more lines`);
        }
      }
    }
  }
  
  private formatLoopGuardEvent(event: LoopGuardCooldownEvent, timestamp: string, pkg: string): void {
    console.log(`[${timestamp}] ‚è∏ ${pkg} cooldown ${event.cooldownMs/1000}s (loop guard)`);
  }
  
  private formatDegradedHashingEvent(event: DegradedHashingEvent, timestamp: string, pkg: string): void {
    const status = event.enabled ? 'enabled' : 'disabled';
    console.log(`[${timestamp}] üîç ${pkg} degraded hashing ${status} (${event.reason})`);
  }
  
  private formatRelinkDoneEvent(event: RelinkDoneEvent, timestamp: string): void {
    const consumerList = event.consumers.slice(0, 2).join(', ');
    const moreConsumers = event.consumers.length > 2 ? ` +${event.consumers.length - 2} more` : '';
    
    console.log(`[${timestamp}] üîó relink ${event.producer} ‚Üí ${consumerList}${moreConsumers} (${event.filesTouched} files)`);
  }
  
  private formatSkippedEvent(event: SkippedEvent, timestamp: string, pkg: string): void {
    console.log(`[${timestamp}] ‚Ä¢ ${pkg} unchanged (skip)`);
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private formatDuration(ms: number): string {
    if (ms < 1000) return `${ms}ms`;
    return `${(ms / 1000).toFixed(1)}s`;
  }
  
  /**
   * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π (—É–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤)
   * 
   * @param event - –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
   * @returns —Å–∞–Ω–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
   * 
   * –ü—Ä–∏—á–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è type assertion: spread –æ–ø–µ—Ä–∞—Ü–∏—è {...event} —Å–æ–∑–¥–∞–µ—Ç
   * —Ç–∏–ø, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –±–∞–∑–æ–≤—ã–º DevLinkEvent, –Ω–æ –Ω–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∏–∑ AllDevLinkEvents.
   * Type assertion –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π.
   * 
   * –ö–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Å mapped types
   */
  private sanitizeEvent(event: AllDevLinkEvents): AllDevLinkEvents {
    const sanitized = { ...event } as any;
    
    // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º stderrHead –µ—Å–ª–∏ –µ—Å—Ç—å
    if (sanitized.stderrHead && Array.isArray(sanitized.stderrHead)) {
      sanitized.stderrHead = sanitized.stderrHead.map((line: string) => 
        this.sanitizeSecrets(line)
      );
    }
    
    return sanitized;
  }
  
  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   * 
   * @param text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @returns —Ç–µ–∫—Å—Ç —Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏
   * 
   * –ü—Ä–∏—á–∏–Ω–∞: –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π, —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–∞—Ä–æ–ª–µ–π
   * –≤ stdout/stderr –≤—ã–≤–æ–¥–∞—Ö. –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –ø—Ä–∏ --json —Ä–µ–∂–∏–º–µ –¥–ª—è CI/CD.
   * 
   * –ö–æ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
   */
  private sanitizeSecrets(text: string): string {
    return text
      .replace(/\x1b\[[0-9;]*m/g, '') // —É–¥–∞–ª—è–µ–º ANSI –µ—Å–ª–∏ --json
      .replace(/API_KEY=\S+/gi, 'API_KEY=***')
      .replace(/TOKEN=\S+/gi, 'TOKEN=***')
      .replace(/SECRET=\S+/gi, 'SECRET=***')
      .replace(/PASSWORD=\S+/gi, 'PASSWORD=***');
  }
}
